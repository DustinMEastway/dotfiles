# Match set for Interactions JS files.

global_vars:
  -
    name: "findModule"
    params:
      trigger: ":fMod"
    type: "match"
  -
    name: "nodesPath"
    params:
      trigger: ":nodes"
    type: "match"
  -
    name: "serialized"
    params:
      trigger: ":ser"
    type: "match"
matches:
  -
    label: "Log the DB records out."
    replace: |-
      window.indexedDB.open('LokiCatalog', 2).onsuccess = (dbEvent) => {
        const objectStore = dbEvent.target.result.transaction('LokiAKV', 'readwrite').objectStore('LokiAKV');
        objectStore.getAll().onsuccess = (recordsEvent) => {
          console.log(
            recordsEvent.target.result.flatMap(({ val }) => {
              return JSON.parse(val).collections.filter(({ objType }) => {
                return objType === 'trees';
              }).flatMap(({ data }) => {
                return data;
              });
            })
          );
        }
      };
    trigger: ":dbDesigns"
  -
    label: "Find a module on serialized."
    form: |-
      {{serialized}}.modules.find(({ name }) => {
        return name === '[[moduleName]]';
      })
    form_fields:
      moduleName:
        default: 'moduleName'
    trigger: ":fMod"
  -
    label: "Find a node on a module on serialized."
    form: |-
      {{findModule}}?{{nodesPath}}.find(({ name }) => {
        return name === '[[nodeName]]';
      })
    form_fields:
      nodeName:
        default: 'nodeName'
    trigger: ":fNode"
    vars:
      -
        name: "findModule"
        params:
          trigger: ":fMod"
        type: "match"
  -
    label: "Loop through all nodes on all modules on serialized."
    replace: |-
      console.log({{serialized}}.modules.flatMap((mod) => {
        return mod{{nodesPath}}.map((node) => {
          return { mod, item: node };
        });
      }).filter(() => {
        return true;
      }).map(({ mod, item }) => {
        return `${mod.name} ${item.name}`;
      }).join('\n'));
    trigger: ":lNode"
  -
    label: "Loop through all nodes on all modules & objects on serialized."
    replace: |-
      console.log([
        ...{{serialized}}.modules.flatMap((mod) => {
          return mod{{nodesPath}}.map((node) => {
            return { mod, item: node };
          });
        }),
        ...{{serialized}}.objects.map((obj) => {
          return { item: obj };
        })
      ].filter(() => {
        return true;
      }).map(({ item }) => {
        return `${item.name}`;
      }).join('\n'));
    trigger: ":lObjNode"
  -
    label: "Get nodes off from a serialized module."
    replace: ".versions[1].flow.nodes"
    trigger: ":nodes"
  -
    label: "Access selected element."
    replace: "window.apm.getCurrentDiagramWidget().state.selectedContext.props.config"
    trigger: ":sel"
  -
    label: "Access serialized."
    replace: "window.apm.serialized.components"
    trigger: ":ser"
