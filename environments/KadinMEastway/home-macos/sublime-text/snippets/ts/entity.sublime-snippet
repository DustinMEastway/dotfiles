<snippet>
  <content><![CDATA[
import {
  Ctx,
  Field,
  ObjectType
} from 'type-graphql';
import {
  BaseEntity,
  BeforeInsert,
  BeforeUpdate,
  Column,
  CreateDateColumn,
  Entity,
  PrimaryGeneratedColumn,
  UpdateDateColumn
} from 'typeorm';
import { AppContext } from '../types';

@Entity()
@ObjectType()
export class ${1:${TM_FILENAME/\..*|(?:^|-)([a-z])/\u\1/g}} extends BaseEntity {$0
  constructor(
    @Ctx() private _context: AppContext
  ) {
    super();
  }

  /** When the entity was created. */
  @CreateDateColumn()
  @Field(() => String)
  createdAt!: Date;

  /** ID of the user that created this entity. */
  @Column({ type: 'uuid' })
  @Field(() => String, { nullable: true })
  createdBy!: string | null;

  /** ID of the entity. */
  @Field()
  @PrimaryGeneratedColumn('uuid')
  id!: string;

  /** When the entity was updated. */
  @Field(() => String)
  @UpdateDateColumn()
  updatedAt!: Date;

  /** ID of the user that updated this entity. */
  @Column({ type: 'uuid' })
  @Field(() => String, { nullable: true })
  updatedBy!: string | null;

  @BeforeInsert()
  onBeforeInsert(): void {
    const { userId } = this._context.request.session;
    this.createdBy = userId ?? null;
    this.onBeforeUpdate();
  }

  @BeforeUpdate()
  onBeforeUpdate(): void {
    const { userId } = this._context.request.session;
    this.updatedBy = userId ?? null;
  }
}
]]></content>
  <tabTrigger>tsEntity</tabTrigger>
  <scope>source.ts</scope>
</snippet>
